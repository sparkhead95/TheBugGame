There are many issues that can affect the usability and efficiency within a programming language, however within this report I will outline the most common that have risen during my time coding the Aphids and Ladybugs assignment. C and C++ have a much different compilation procedure in comparison to Java, which has proven to be challenging when trying to establish how to debug and run the program. I have been using Windows and Linux during my time coding the project, and switching between the two while coding is relatively easy when using Java, however when using C and C++ it can be rather different as there are different ways to use modules like the GDB in Linux as opposed to Windows. Aside from operating systems and compilation/debugging procedures, there are the obvious differences such as the way each language works. This can involve how C++ and Java are more object-oriented solutions than C, or even simply how the program will differ in the way of methods or functions. For example, C++ will give a more intimate interpretation of function destructors etc. All of these points can hinder or support the implementation in their own way. As previously mentioned, I will elaborate on these points and provide a conclusion, however I will then discuss which language would be most suitable for this task, and provide a conclusion on this too.


As the introduction dictates, the usability within the languages in terms of setting themselves up with the operating systems has a part to play here. I found that debugging and using the GDB is much easier on Linux than Windows. This hindered my performance when I was coding on Windows (when I didnt have access to my laptop) as the debugging interface on the IDE that I was using (Netbeans) is not as friendly as others – which brings me to my next point. I much prefer the IDE's compatible with Java- such as IntelliJ and Eclipse, due to the debugging functions in each one. This can be an aspect as where Java would, in my opinion, be faster to implement than C or C++. One may say “you don't have to use an IDE, you can use command line to debug your programs”  - this brings me back to the point I made earlier operating systems have different methods of running these in command line (check the GDB statement earlier made).

For this specific assignment and its fundimental functionality -  it's best to skip right to the point here. I don't believe that C would be at all compatible on it's own. With its lack of object orientation (the closest it has to this is its ability to implement structures) it would hinder the time taken to progress at all within the program. I believe that without making an object of things such as Aphids or Ladybugs, this could prove to be quite challenging. One could make a structure that would hold the specifications of each bug however it could be hard to import these specifications across classes and source files (header files could be used, but not as efficiently as C++). Having said this, an implementation of both structures and object orientation can be extremely efficient; this is possible within C++.

It's difficult so say whether Java is more effective than C++ for this assignment. As previously mentioned, objects of the Aphids and Ladybugs must be created in order to import all of their functions and functionalities. It could be most useful to create a type of bug that these Aphids and Ladybugs would fall into and, because these two languages are object oriented, it would be most easy to adjust the program if a new bug was brought in (which can be more difficult in C because this new bug would first have to be imported into existing structures etc- could be more hassle than necessary). This can be created in both Java and C++. One could say that C++ would be most effective as, in order to create types of bugs, one could create a header file (entitled something like bug) that would have class declarations for different types of bugs in it (which would mean that any change made to the 'bug' type would be made to every class that falls within it). On the other hand, the equivilant could be created using the Java interface- an interface of type bug could be created and any bugs that implement this interface would contain its methods. In hindsight and from an object oriented perspective, I believe that this Java implementation would be much cleaner. To elaborate- say that instead of just the Ladybug and Aphid being in the 'bug' header class, there were hundreds more (e.g algae, plankton). All of these class/.cpp definitions would have to be within this 'bug' header class. In Java, they would be separate objects that simply implement this class. The project tree would be much larger due to all the extra files but from an OO point of view I believe this is a much stronger implementation. Overall with these two languages, their ability to use objects globally would support the creation of this program much more than C.

C and C++ both implement the whole idea of classes differently. While Java will simply have a class that can inherit/implement other classes, C and C++ will use header files as well as the .cpp files to create a module- declaring functions and some variables in the header file, then implementing these in the .cpp file. Contrary to popular belief, my opinion is that this hinders the time taken to complete the assignment – as opposed to Java. This aspect of C and C++ is much more object oriented than Java, as each .cpp is using an object of its header in order to implement its methods, whereby Java will declare and implement its methods in one class. In Java one can create a class and implement it there and then. In C and C++ it is of good programming practice to create a header file first, declare methods and some variables, then create the .cpp file that must precisely match the header file (or else throws some lovely errors!).

Pointers and memory locations. In my opinion C and C++ require the use of these much more than Java for simple actions. In areas like String, for example, i've always felt like Java has had much more support for this functionality than C and C++. Firstly, if you wish to use a string in C or C++, you have to #include <string>.  Ways around this include the manual use of pointers of char all for the use of a String. Java has String. No mess.
Other than this, C will use pointers endlessly to give a virtual reality of object-orientation within its structures. For example an array of a structure that, within the structure, will have a pointer to the next one in the array. It will also require the use of memory locations to identify an integer or char.
These (potentially small) aspects can prove to hinder performance of the programmer when using C or C++.
This being said, Java will also have the use of pointers, however it is less obligatory to use them in this language and even when they are used, Java will cover up its complexity with its libraries.

 
